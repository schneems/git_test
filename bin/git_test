#!/usr/bin/env ruby
require 'rubygems'
require 'gli'
require 'lib/git_test_version'
require 'lib/git_test'

include GLI

#    :::::::: ::::::::::: :::::::::::      ::::::::::: :::::::::: :::::::: :::::::::::
#   :+:    :+:    :+:         :+:              :+:     :+:       :+:    :+:    :+:
#   +:+           +:+         +:+              +:+     +:+       +:+           +:+
#   :#:           +#+         +#+              +#+     +#++:++#  +#++:++#++    +#+
#   +#+   +#+#    +#+         +#+              +#+     +#+              +#+    +#+
#   #+#    #+#    #+#         #+#              #+#     #+#       #+#    #+#    #+#
#    ######## ###########     ###              ###     ########## ########     ###


program_desc %Q{ git_test runs your tests and stores them in git. Use git_test to track
  tests over multiple branches, runs, and teammates. Run git_test when you pull and push
  and you'll always know the state of your project!}

version GitTest::VERSION

desc 'test command used to run tests'
default_value 'rspec spec/ -f h -c'
arg_name 'command'
flag [:cmd]


desc "shows previous reports. Use args 'all', 'last', or provide a report name"
long_desc %Q{
  - `all` lists reports
  - `last` shows the last report
  - `2011-10-21T23:22:09Z_schneems_passed.html` shows that report
}
command :show do |c|
  c.action do |global_options,options,args|
    global_options.merge! options
    runner = GitTest::Runner.new(global_options)
    if args.include?('all')
      reports = runner.ls_report_dir
      runner.notify.raw(reports)
    else
      path = args.first unless args.include?('last')
      runner.show_report(path)
    end
  end
end


desc "runs your tests then pushes to origin"
command :push do |c|
  c.desc 'if true will push code to repo after running tests instead of before'
  c.default_value true
  c.arg_name 'push_after_test'
  c.switch [:pat,:push_after_test]

  c.action do |global_options,options,args|
    begin
      global_options.merge! options
      runner = GitTest::Runner.new(global_options)
      runner.pull!
      runner.push! unless options[:push_after_test]
      runner.test!
      runner.write_report!
      runner.push!
      runner.notify.write("to view test report run `git_test show last`", :green)
    ensure
      runner.clean_test_dir!
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  puts exception
  puts exception.backtrace
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
